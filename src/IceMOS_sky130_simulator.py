import os
import os
import subprocess
import sys
import time
from IceMOS_sky130_netlist_generator import NetlistGeneratorSky130


class IceMOS_simulator_sky130:
    """
    Simulator class for running SPICE netlists generated for SKY130 simulations.

    This class uses ngspice in batch mode to simulate netlists that were generated
    based on extracted bin models. It supports simulating both IV (IDRAIN vs. VGATE)
    and IV_VDS (IDRAIN vs. VDRAIN with VGATE sweep) simulations. The simulation
    output files are created in the same folder as the netlist.

    All simulations use the 'modified' netlist generated by the netlist generator.
    """

    def __init__(self, original_model_file):
        """
        Initialize the simulator with the path to the original SPICE model file.
        
        :param original_model_file: Path to the original SPICE model file (e.g., "sky130_fd_pr__nfet_01v8.pm3.spice").
        """
        self.original_model_file = original_model_file
        self.generator = NetlistGeneratorSky130(original_model_file)

    def _simulate_netlist(self, netlist_path):
        """
        Simulate the given netlist using ngspice in batch mode.
        
        This method converts the provided netlist path to an absolute path and sets the 
        working directory to the netlist's folder so that all output files (e.g., .raw, .csv)
        are generated in that folder.
        
        :param netlist_path: Path to the netlist file to simulate.
        :return: The stdout output of the simulation.
        :raises RuntimeError: If the simulation fails.
        """
        # Convert netlist_path to an absolute path
        netlist_path = os.path.abspath(netlist_path)
        cmd = ["ngspice", "-b", netlist_path]
        netlist_dir = os.path.dirname(netlist_path)
        print(f"Running simulation with command: {' '.join(cmd)}")
        print(f"Simulation working directory: {netlist_dir}")
        
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                   universal_newlines=True, cwd=netlist_dir)
        
        spinner = ['-', '\\', '|', '/']
        i = 0
        while process.poll() is None:
            sys.stdout.write("\rSimulating... " + spinner[i % len(spinner)])
            sys.stdout.flush()
            time.sleep(0.1)
            i += 1
        sys.stdout.write("\rSimulation complete.            \n")
        sys.stdout.flush()
        
        stdout, stderr = process.communicate()
        if process.returncode != 0:
            print("Simulation error:")
            print(stderr)
            raise RuntimeError("Netlist simulation failed.")
        else:
            print("ngspice stdout:")
            print(stdout)
            print("ngspice stderr:")
            print(stderr)
        return stdout

    def simulate_iv(self, device_type, bin_number=None, W=None, L=None,
                    vgate_start=0, vgate_stop=1.8, vgate_step=0.1):
        """
        Generate and simulate an IV netlist (IDRAIN vs. VGATE) for the specified device.
        
        The bin is determined either by an explicit bin number or by provided transistor dimensions (W, L).
        Always uses the 'modified' netlist.
        
        :param device_type: 'nch' for NMOS or 'pch' for PMOS.
        :param bin_number: (Optional) The bin number to simulate.
        :param W: (Optional) Transistor width in µm.
        :param L: (Optional) Transistor length in µm.
        :param vgate_start: Starting voltage for the VGATE sweep.
        :param vgate_stop: Ending voltage for the VGATE sweep.
        :param vgate_step: Voltage step for the VGATE sweep.
        :return: The stdout output from the simulation.
        """
        netlists = self.generator.generate_iv_netlists(
            device_type=device_type, bin_number=bin_number, W=W, L=L,
            vgate_start=vgate_start, vgate_stop=vgate_stop, vgate_step=vgate_step)
        netlist_path = netlists["modified"]
        print(f"Simulating IV netlist: {netlist_path}")
        return self._simulate_netlist(netlist_path)
    
    def simulate_iv_vds(self, device_type, bin_number=None, W=None, L=None,
                          vgs_start=0, vgs_stop=1.8, vgs_step=0.6,
                          vds_start=0, vds_stop=1.8, vds_step=0.1):
        """
        Generate and simulate an IV_VDS netlist (IDRAIN vs. VDRAIN with a VGATE sweep) for the specified device.
        
        The bin is determined either by an explicit bin number or by the provided transistor dimensions (W, L).
        Always uses the 'modified' netlist.
        
        :param device_type: 'nch' for NMOS or 'pch' for PMOS.
        :param bin_number: (Optional) The bin number to simulate.
        :param W: (Optional) Transistor width in µm.
        :param L: (Optional) Transistor length in µm.
        :param vgs_start: Starting voltage for the VGS sweep.
        :param vgs_stop: Ending voltage for the VGS sweep.
        :param vgs_step: Voltage step for the VGS sweep.
        :param vds_start: Starting voltage for the VDS sweep (within the VGS loop).
        :param vds_stop: Ending voltage for the VDS sweep.
        :param vds_step: Voltage step for the VDS sweep.
        :return: The stdout output from the simulation.
        """
        netlists = self.generator.generate_iv_vds_netlists(
            device_type=device_type, bin_number=bin_number, W=W, L=L,
            vgs_start=vgs_start, vgs_stop=vgs_stop, vgs_step=vgs_step,
            vds_start=vds_start, vds_stop=vds_stop, vds_step=vds_step)
        netlist_path = netlists["modified"]
        print(f"Simulating IV VDS netlist: {netlist_path}")
        return self._simulate_netlist(netlist_path)

    def plot_iv_results_qt(self, device_type, bin_number, csv_filename=None):
        """
        Plot the IV simulation results (IDRAIN vs. VGATE) using PyQtGraph for interactive plotting.

        Reads the CSV file (assumed to be space-delimited with no header) generated by the IV simulation,
        assigns column names ("VG" and "ID" for NMOS, "VG" and "IS" for PMOS), and displays an interactive plot
        using PyQtGraph. This method does not block execution.

        :param device_type: 'nch' for NMOS or 'pch' for PMOS.
        :param bin_number: The bin number used in the simulation.
        :param csv_filename: (Optional) CSV filename; defaults to "IV.csv".
        :return: The PyQtGraph window object.
        """
        import pandas as pd
        import pyqtgraph as pg
        from PyQt5 import QtWidgets
        import sys

        device_type = device_type.lower()
        if csv_filename is None:
            csv_filename = "IV.csv"

        folder = os.path.join("circuits", device_type, f"bin_{bin_number}")
        csv_path = os.path.join(folder, csv_filename)
        if not os.path.exists(csv_path):
            print(f"CSV file {csv_path} not found. Please run the simulation first.")
            return

        try:
            df = pd.read_csv(csv_path, delim_whitespace=True, header=None)
        except Exception as e:
            print(f"Error reading CSV file {csv_path}: {e}")
            return

        if device_type == "nch":
            df.columns = ["VG", "ID"]
            y_label = "Drain Current (ID)"
            title = f"NMOS IV Curve (Bin {bin_number})"
        else:
            df.columns = ["VG", "IS"]
            y_label = "Source Current (IS)"
            title = f"PMOS IV Curve (Bin {bin_number})"

        # Get or create the QApplication.
        app = QtWidgets.QApplication.instance()
        created_app = False
        if app is None:
            app = QtWidgets.QApplication(sys.argv)
            created_app = True

        # Create the PyQtGraph window.
        win = pg.GraphicsLayoutWidget(title=title)
        win.resize(800, 600)
        p = win.addPlot(title=title)
        p.setLabel('left', y_label)
        p.setLabel('bottom', "Gate Voltage (VG)")
        p.showGrid(x=True, y=True)
        p.plot(df["VG"].values, df.iloc[:, 1].values,
               pen=pg.mkPen(color='b', width=2),
               symbol='o', symbolSize=5)
        win.show()

        # Process events so that the window appears but do not block.
        if created_app:
            QtWidgets.QApplication.processEvents()
        return win

# Example usage:
# if __name__ == '__main__':
#     # Path to the original model file (e.g., "sky130_fd_pr__nfet_01v8.pm3.spice")
#     original_model_file = "sky130_fd_pr__nfet_01v8.pm3.spice"
#
#     # Create an instance of the simulator.
#     simulator = IceMOS_simulator_sky130(original_model_file)
#
#     # Example 1: Simulate IV for NMOS using a specific bin number.
#     print("Simulating IV for NMOS using bin number 0:")
#     iv_output = simulator.simulate_iv(device_type='nch', bin_number=0,
#                                       vgate_start=0, vgate_stop=1.8, vgate_step=0.1)
#     print(iv_output)
#
#     # Example 2: Simulate IV VDS for NMOS using dimensions (W=1.26 µm, L=0.15 µm)
#     print("Simulating IV VDS for NMOS using dimensions W=1.26 µm, L=0.15 µm:")
#     iv_vds_output = simulator.simulate_iv_vds(device_type='nch', W=1.26, L=0.15,
#                                               vgs_start=0, vgs_stop=1.8, vgs_step=0.6,
#                                               vds_start=0, vds_stop=1.8, vds_step=0.1)
#     print(iv_vds_output)
